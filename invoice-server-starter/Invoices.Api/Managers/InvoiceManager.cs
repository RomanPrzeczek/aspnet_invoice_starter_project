using AutoMapper;
using Invoices.Api.Interfaces;
using Invoices.Api.Models;
using Invoices.Data.Interfaces;
using Invoices.Data.Models;
using Invoices.Data.Repositories;
using Microsoft.EntityFrameworkCore;

namespace Invoices.Api.Managers
{
    public class InvoiceManager : IInvoiceManager
    {
        private readonly IInvoiceRepository invoiceRepository;
        private readonly IMapper mapper;

        public InvoiceManager(IInvoiceRepository invoiceRepository, IMapper mapper)
        {
            this.invoiceRepository = invoiceRepository;
            this.mapper = mapper;
        }

        public InvoiceDto AddInvoice(InvoiceDto invoiceDto)
        {
            Invoice invoice = mapper.Map<Invoice>(invoiceDto);
            invoice.InvoiceId = default;
            Invoice addedInvoice= invoiceRepository.Insert(invoice);

            /// summary
            /// Returns created invoinceDto by searching it in the list acc. its id.
            /// FindById is here IInvoiceRepository method, which overloads BaseRepository method and
            /// differs in attaching Seller/Buyer objects to it.
            Invoice? fullInvoice = invoiceRepository.FindById((ulong)addedInvoice.InvoiceId);

            return mapper.Map<InvoiceDto>(addedInvoice);
        }

        public InvoiceDto? DeleteInvoice(uint invoiceId)
        {
            if (!invoiceRepository.ExistsWithId(invoiceId))
                return null;

            Invoice invoice = invoiceRepository.FindById((ulong)invoiceId)!;
            InvoiceDto invoiceDto = mapper.Map<InvoiceDto>(invoice);

            invoiceRepository.Delete(invoiceId);

            return invoiceDto;
        }

        public IList<InvoiceDto> GetAllInvoices(
            ulong? buyerId,
            ulong? sellerId,
            string? product,
            decimal? minPrice,
            decimal? maxPrice,
            int? limit
            )
            {
            //learn: IList<Invoice> invoices = invoiceRepository.GetAll(); replaced with
            var query = invoiceRepository.GetQueryable()
                    .Include(i => i.Buyer)
                    .Include(i => i.Seller)
                    .AsQueryable();

                if (buyerId.HasValue)
                    query = query.Where(i => i.BuyerId == buyerId);

                if (sellerId.HasValue)
                    query = query.Where(i => i.SellerId == sellerId);

                if (!string.IsNullOrEmpty(product))
                    query = query.Where(i => i.Product.Contains(product));

                if (minPrice.HasValue)
                    query = query.Where(i => i.Price >= minPrice);

                if (maxPrice.HasValue)
                    query = query.Where(i => i.Price <= maxPrice);

                if (limit.HasValue)
                    query = query.Take(limit.Value);
            // string sql = query.ToQueryString(); // learn: for debugging purposes, to see the SQL query generated by EF Core

            return mapper.Map<IList<InvoiceDto>>(query.ToList()); //learn: replaced return mapper.Map<IList<InvoiceDto>>(invoices);
        }

        public InvoiceDto? GetInvoice(ulong invoiceId)
        {
            Invoice? invoice = invoiceRepository.FindById((ulong)invoiceId);

            if (invoice == null)
            {
                return null;
            }

            return mapper.Map<InvoiceDto>(invoice);
        }

        public InvoiceDto? UpdateInvoice(InvoiceDto invoiceDto)
        {
            if (!invoiceRepository.ExistsWithId(invoiceDto.InvoiceId))
                return null;

            Invoice invoice = mapper.Map<Invoice>(invoiceDto);
            Invoice updatedInvoice = invoiceRepository.Update(invoice);

            return mapper.Map<InvoiceDto>(updatedInvoice);
        }

        public IEnumerable<InvoiceDto> GetInvoicesBySellerIco(string ico)
        {
            var invoices = invoiceRepository.GetQueryable()
                .Include(i => i.Seller)
                .Include(i => i.Buyer)
                .Where(i => i.Seller.IdentificationNumber == ico)
                .ToList();

            return mapper.Map<List<InvoiceDto>>(invoices);
        }

        public IEnumerable<InvoiceDto> GetInvoicesByBuyerIco(string ico)
        {
            var invoices = invoiceRepository.GetQueryable()
                .Include(i => i.Seller)
                .Include(i => i.Buyer)
                .Where(i => i.Buyer.IdentificationNumber == ico)
                .ToList();

            return mapper.Map<List<InvoiceDto>>(invoices);
        }


        ///<summary>
        ///Below is alternative to 2 methods above with use of delegate for switching Seller/Buyer
        ///in common query method getting invoices accordingly.
        ///pros: 4 rows shorter code in comparison to previous above.
        ///cons: a bit less understandable for less skilled programmers
        /// </summary>
/*        private IEnumerable<InvoiceDto> GetInvoicesByIco(Func<Invoice, Person> selector, string ico)
        {
            var invoices = invoiceRepository.GetQueryable()
                .Include(i => i.Seller)
                .Include(i => i.Buyer)
                .Where(i => selector(i).IdentificationNumber == ico)
                .ToList();

            return mapper.Map<List<InvoiceDto>>(invoices);
        }

        public IEnumerable<InvoiceDto> GetInvoicesBySellerIco(string ico)
            => GetInvoicesByIco(i => i.Seller, ico);

        public IEnumerable<InvoiceDto> GetInvoicesByBuyerIco(string ico)
            => GetInvoicesByIco(i => i.Buyer, ico);
*/
    }
}
