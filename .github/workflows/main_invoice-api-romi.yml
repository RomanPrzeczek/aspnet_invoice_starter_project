name: Build and deploy ASP.Net Core app to Azure Web App - invoice-api-romi

on:
  push:
    branches:
      - main
    paths:
      - 'invoice-server-starter/Invoices.Api/**'
      - 'invoice-server-starter/Invoices.Data/**'
      - 'invoice-server-starter/global.json'
      - 'invoice-server-starter/Directory.Build.props'
      - '.github/workflows/main_invoice-api-romi.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore
        working-directory: ./invoice-server-starter/Invoices.Api
        run: dotnet restore Invoices.Api.csproj

      - name: Build with dotnet
        working-directory: ./invoice-server-starter/Invoices.Api
        run: dotnet build Invoices.Api.csproj --configuration Release --no-restore

      - name: Publish API (Release)
        working-directory: ./invoice-server-starter/Invoices.Api
        run: dotnet publish Invoices.Api.csproj -c Release -o ./out --no-build

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ./invoice-server-starter/Invoices.Api/out

  deploy:
    runs-on: windows-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ./out

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_16BB25DD88794A9F979EF8547D145527 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_70EB6D0F52924A0F917874026CC927DA }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_391E61CE2BDC402B8FA49E00698C32F5 }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'invoice-api-romi'
          slot-name: 'Production'
          package: ./out

          # --- NOVÉ KROKY: warmup + health-check ---
      - name: Wait for warmup
        shell: pwsh
        run: |
          Write-Host "Waiting for app start…"
          Start-Sleep -Seconds 20

      - name: Smoke / Health check
        shell: pwsh
        env:
          HEALTH_URL: https://invoice-api-romi-dfftdqhaacbab2h0.westeurope-01.azurewebsites.net/health
        run: |
          Write-Host "Checking $env:HEALTH_URL …"
          $maxRetries = 10
          $delay = 10
          for ($i=1; $i -le $maxRetries; $i++) {
            try {
              $resp = Invoke-WebRequest -Uri $env:HEALTH_URL -UseBasicParsing -TimeoutSec 10 -Method GET
              if ($resp.StatusCode -eq 200) {
                Write-Host "✅ Health-check OK."
                exit 0
              }
            } catch {
              Write-Host "Error: $($_.Exception.Message)"
            }
            Write-Host "Attempt $i/$maxRetries failed, waiting $delay sec and retrying…"
            Start-Sleep -Seconds $delay
          }
          Write-Error "❌ Health-check failed – API respond not 200 after deploy."
          exit 1